name: PHPUnit

on:
  push:
  pull_request:
  # Allow manually triggering the workflow.
  workflow_dispatch:

jobs:

  unit-tests:
    name: Tests (PHP ${{ matrix.php }} with ${{ matrix.prefer-versions }} lib versions)
    runs-on: ubuntu-latest
    continue-on-error: ${{ matrix.php == '8.4' }}

    strategy:
      fail-fast: false
      matrix:
        operating-system: ['ubuntu-latest']
        php:
          - '8.4'
          - '8.3'
          - '8.2'
          - '8.1'
          - '8.0'
          - '7.4'
          - '7.3'
          - '7.2'
        prefer-versions: ['latest']
        include:
          - php: '7.2'
            prefer-versions: 'lowest'
            operating-system: 'ubuntu-latest'

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Install PHP with latest composer
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php }}
          ini-values: error_reporting=-1, display_errors=On, log_errors_max_len=0
          tools: phpunit

      # Install dependencies and handle caching in one go.
      # @link https://github.com/marketplace/actions/install-composer-dependencies
      - name: "Install lowest Composer dependencies (PHP 7.2)"
        if: ${{ matrix.prefer-versions == 'lowest' }}
        uses: "ramsey/composer-install@v2"
        with:
          composer-options: --prefer-lowest

      - name: "Install Composer dependencies (PHP <= 8.3)"
        if: ${{ matrix.prefer-versions == 'latest' && matrix.php <= '8.3' }}
        uses: "ramsey/composer-install@v2"

      - name: "Install Composer dependencies (PHP 8.4)"
        if: ${{ matrix.php >= '8.4' }}
        uses: "ramsey/composer-install@v2"
        with:
          composer-options: --ignore-platform-reqs

      - name: Run phpunit tests
        run: composer run phpunit

  static-code-analysis:
    name: PHPStan (PHP ${{ matrix.php }})
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        operating-system: ["ubuntu-latest"]
        php: ["8.3"]

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Setup PHP, with composer and extensions
        uses: shivammathur/setup-php@v2 #https://github.com/shivammathur/setup-php
        with:
          php-version: ${{ matrix.php }}
          tools: phpunit
          extensions: mbstring, xml, ctype, iconv, intl, pdo_sqlite

      # Install composer dependencies and handle caching in one go.
      # @link https://github.com/marketplace/actions/install-composer-dependencies
      - name: "Install Composer dependencies"
        uses: "ramsey/composer-install@v2"

      - name: Run static code analysis
        run: composer run phpstan -- --error-format=github

  code-coverage:
    name: PHPStan (PHP ${{ matrix.php }})
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        operating-system: ["ubuntu-latest"]
        php: ["8.3"]

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Setup PHP, with composer and extensions
        uses: shivammathur/setup-php@v2 #https://github.com/shivammathur/setup-php
        with:
          php-version: ${{ matrix.php }}
          tools: phpunit
          extensions: mbstring, xml, ctype, iconv, intl, pdo_sqlite
          coverage: xdebug

      # Install composer dependencies and handle caching in one go.
      # @link https://github.com/marketplace/actions/install-composer-dependencies
      - name: "Install Composer dependencies"
        uses: "ramsey/composer-install@v2"

      - name: Run phpunit tests
        run: composer run phpunit -- --coverage-clover ./.code-coverage/clover.xml

      - name: Send coverage report to Codecov
        if: ${{ success() }}
        uses: codecov/codecov-action@v3
        with:
          files: ./.code-coverage/clover.xml
          fail_ci_if_error: true
          verbose: true
